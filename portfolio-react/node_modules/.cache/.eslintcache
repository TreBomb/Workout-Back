[{"/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/index.js":"1","/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/App.js":"2","/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/reportWebVitals.js":"3","/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/components/Footer.js":"4","/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/components/Home.js":"5","/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/components/News.js":"6","/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/components/Login.js":"7","/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/components/Signup.js":"8","/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/components/Dashboard.js":"9","/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/components/SetGoal.js":"10","/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/components/NewRoutine.js":"11","/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/components/Viewer.js":"12","/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/components/NewWorkout.js":"13","/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/components/UserInfo.js":"14","/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/components/FourZeroFour.js":"15","/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/components/NavBar.js":"16","/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/components/NewsCards.js":"17","/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/components/ExerciseCards.js":"18"},{"size":500,"mtime":1638556363443,"results":"19","hashOfConfig":"20"},{"size":3348,"mtime":1638556363443,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":1638556363443,"results":"22","hashOfConfig":"20"},{"size":1047,"mtime":1642809462360,"results":"23","hashOfConfig":"20"},{"size":1399,"mtime":1638556363443,"results":"24","hashOfConfig":"20"},{"size":452,"mtime":1638556363443,"results":"25","hashOfConfig":"20"},{"size":1781,"mtime":1638556363443,"results":"26","hashOfConfig":"20"},{"size":2203,"mtime":1638556363443,"results":"27","hashOfConfig":"20"},{"size":2859,"mtime":1638556363443,"results":"28","hashOfConfig":"20"},{"size":2623,"mtime":1638556363443,"results":"29","hashOfConfig":"20"},{"size":5574,"mtime":1638556363443,"results":"30","hashOfConfig":"20"},{"size":3467,"mtime":1638556363443,"results":"31","hashOfConfig":"20"},{"size":4286,"mtime":1638556363443,"results":"32","hashOfConfig":"20"},{"size":1571,"mtime":1638556363443,"results":"33","hashOfConfig":"20"},{"size":230,"mtime":1638556363443,"results":"34","hashOfConfig":"20"},{"size":1500,"mtime":1638556363443,"results":"35","hashOfConfig":"20"},{"size":579,"mtime":1638556363443,"results":"36","hashOfConfig":"20"},{"size":5426,"mtime":1642827728590,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1p958fn",{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"40"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},"/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/index.js",[],["84","85"],"/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/App.js",["86"],"import React, { useState, useEffect } from \"react\";\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport NavBar from './components/NavBar';\nimport Footer from './components/Footer';\nimport Home from './components/Home';\nimport News from \"./components/News\";\nimport Login from \"./components/Login\";\nimport Signup from \"./components/Signup\";\nimport UserInfo from \"./components/UserInfo\";\nimport SetGoal from \"./components/SetGoal\";\nimport Dashboard from \"./components/Dashboard\";\nimport NewRoutine from \"./components/NewRoutine\";\nimport NewWorkout from \"./components/NewWorkout\";\nimport Viewer from \"./components/Viewer\";\nimport FourZeroFour from \"./components/FourZeroFour\";\n\nfunction App() {\n  const [user, setUser] = useState(null);\n  const [isLoggedin, setIsLoggedin] = useState(false);\n  const [workoutInfo, setWorkoutInfo] = useState(null);\n\n  useEffect(() => {\n    fetch(\"/account\")\n    .then(res => res.json())\n    .then(data => {\n      if (data.name) {\n        console.log(data);\n        setUser(data);\n        setIsLoggedin(true);\n        // if (data.goal === \"bulk\") {\n        //   setWorkoutInfo({\n        //     reps: \"12, 12, 8, 6\",\n        //     rest: \"120\",\n        //     weight: \"heavy\"\n        //   });\n        // } else if (data.goal === \"maintain\") {\n        //   setWorkoutInfo({\n        //     reps: \"15, 12, 12, 8\",\n        //     rest: \"90\",\n        //     weight: \"moderate\"\n        //   });\n        // } else if (data.goal === \"cut\") {\n        //   setWorkoutInfo({\n        //     reps: \"20, 15, 15, 12, 12\",\n        //     rest: \"45\",\n        //     weight: \"light\"\n        //   });\n        // }\n      } else {\n        setUser(null);\n        setIsLoggedin(false);\n        setWorkoutInfo(null);\n      }\n    })\n    .catch(err => console.log(err));\n  }, []);\n\n  return (\n    <Router>\n      <Switch>\n        <div className=\"App\">\n            <NavBar user={user} isLoggedin={isLoggedin} />\n            <Route exact path=\"/\">\n              <Home />\n              <News />\n            </Route>\n            <Route exact path=\"/news\">\n              <News />\n            </Route>\n            <Route exact path=\"/login\">\n              <Login setUser={setUser} setIsLoggedin={setIsLoggedin} />\n            </Route>\n            <Route exact path=\"/signup\">\n              <Signup setUser={setUser} setIsLoggedin={setIsLoggedin} />\n            </Route>\n            <Route exact path=\"/user-info\">\n              <UserInfo user={user} setUser={setUser} isLoggedin={isLoggedin} setIsLoggedin={setIsLoggedin} />\n            </Route>\n            <Route exact path=\"/set-goal\">\n              <SetGoal user={user} setUser={setUser} />\n            </Route>\n            <Route exact path=\"/dashboard\">\n              <Dashboard user={user} setUser={setUser} />\n            </Route>\n            <Route exact path=\"/new-workout\">\n              <NewWorkout user={user} setUser={setUser} />\n            </Route>\n            <Route exact path=\"/new-routine\">\n              <NewRoutine user={user} setUser={setUser} />\n            </Route>\n            <Route exact path=\"/viewer\">\n              <Viewer user={user} />\n            </Route>\n            <Route exact path=\"/404\">\n              <FourZeroFour />\n            </Route>\n            <Footer />\n        </div>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/reportWebVitals.js",[],"/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/components/Footer.js",[],"/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/components/Home.js",[],"/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/components/News.js",[],"/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/components/Login.js",["87"],"import React, { useState, useEffect } from \"react\";\nimport { Link, useHistory } from 'react-router-dom';\n\nfunction Login({ setUser, setIsLoggedin }) {\n  const history = useHistory();\n  const [info, setInfo] = useState({\n    email: \"\",\n    password: \"\",\n  })\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(info);\n\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(info)\n    };\n\n    fetch('https://fit-spot.herokuapp.com/login', requestOptions)\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Something went wrong');\n      }\n    })\n    .then(data => {\n        console.log(data);\n        setUser(data);\n        setIsLoggedin(true);\n        history.push(\"/dashboard\");\n    })\n    .catch(error => {\n      console.log('error', error);\n      alert('Your Username/Password is incorrect');\n    });\n  }\n\n  return (\n    <div className=\"spacer\">\n        <div className=\"accounts-div\">\n            <h1 className=\"txt txt-form\">Login</h1>\n            <form className=\"login-form\" onSubmit={handleSubmit}>\n                <input type=\"email\" placeholder=\"Email\" className=\"input input-text\" onChange={e => setInfo({...info, email: e.target.value})} />\n                <input type=\"password\" placeholder=\"Password\" className=\"input input-text\" onChange={e => setInfo({...info, password: e.target.value})} />\n                <button className=\"btn btn-secondary\">Login</button>\n            </form>\n            <h3 className=\"txt txt-footnote\">Don't have an account?</h3>\n            <Link to=\"/signup\"><button className=\"btn btn-tertiary\">Sign Up</button></Link>\n        </div>\n    </div>\n  );\n}\n\nexport default Login;","/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/components/Signup.js",["88"],"import React, {useState, useEffect} from \"react\";\nimport { Link, useHistory } from 'react-router-dom';\n\nfunction Signup({ setUser, setIsLoggedin }) {\n  const history = useHistory();\n  const [info, setInfo] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    password_confirmation: \"\",\n  })\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(info);\n\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(info)\n    };\n\n    fetch('https://fit-spot.herokuapp.com/signup', requestOptions)\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Something went wrong');\n      }\n    })\n    .then(data => {\n      console.log(data);\n      setUser(data);\n      setIsLoggedin(true);\n      history.push(\"/set-goal\");\n    })\n    .catch(error => {\n      console.log('error', error);\n      alert('Please check that your passwords match and are at least 8 characters with 1 number');\n    });\n  }\n\n  return (\n    <div className=\"spacer\">\n        <div className=\"accounts-div\">\n            <h1 className=\"txt txt-form\">Create an Account</h1>\n            <form className=\"login-form\" onSubmit={handleSubmit}>\n                <input type=\"text\" placeholder=\"First Name\" className=\"input input-text\" onChange={e => setInfo({...info, name: e.target.value})} />\n                <input type=\"email\" placeholder=\"Email\" className=\"input input-text\" onChange={e => setInfo({...info, email: e.target.value})} />\n                <input type=\"password\" placeholder=\"Password\" className=\"input input-text\" onChange={e => setInfo({...info, password: e.target.value})} />\n                <input type=\"password\" placeholder=\"Confirm Password\" className=\"input input-text\" onChange={e => setInfo({...info, password_confirmation: e.target.value})} />\n                <button className=\"btn btn-secondary\">Sign Up</button>\n            </form>\n            <h3 className=\"txt txt-footnote\">Already have an account?</h3>\n            <Link to=\"/login\"><button className=\"btn btn-tertiary\">Login</button></Link>\n        </div>\n    </div>\n  );\n}\n\nexport default Signup;","/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/components/Dashboard.js",[],"/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/components/SetGoal.js",[],"/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/components/NewRoutine.js",["89","90","91","92","93","94","95","96","97","98"],"import React, { useState, useEffect } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nfunction NewRoutine({ user, setUser }) {\n    const history = useHistory();\n    const [days, setDays] = useState([\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]);\n    const [workouts, setWorkouts] = useState([]);\n    const [routineName, setRoutineName] = useState(\"\");\n    const [clickedInfo, setClickedInfo] = useState([]);\n    const [selected, setSelected] = useState({\n        Monday: {name: \"\", id: \"\", exercises: []},\n        Tuesday: {name: \"\",id: \"\",  exercises: []},\n        Wednesday: {name: \"\", id: \"\", exercises: []},\n        Thursday: {name: \"\", id: \"\", exercises: []},\n        Friday: {name: \"\", id: \"\", exercises: []}\n    });\n\n    useEffect(() => {\n        if (user) {\n            fetch(`https://fit-spot.herokuapp.com/users/${user.id}/workouts`)\n            .then(response => response.json())\n            .then(data => {\n                console.log(data);\n                setWorkouts(data);\n            })\n        }\n    } ,[user]);\n\n    useEffect(() => {\n            let current = workouts.find(workout => workout.id == clickedInfo[\"workout\"]);\n            if (current) {\n                setSelected({...selected, [clickedInfo[\"day\"]]: {...selected[clickedInfo[\"day\"]], name: current[\"name\"], id: clickedInfo[\"workout\"], exercises: current[\"exercises\"]}});\n            }\n            if (clickedInfo[\"workout\"] == \"none\") {\n                setSelected({...selected, [clickedInfo[\"day\"]]: {...selected[clickedInfo[\"day\"]], name: \"none\", id: \"\", exercises: []}});\n            }\n            console.log(selected);\n    } ,[clickedInfo]);\n\n    const saveRoutine = selected => {\n\n        const objs = Object.values(selected);\n        const filters = objs.filter(obj => obj.name == \"none\" || obj.name == \"\");\n        console.log(filters, routineName);\n\n        if (filters.length == 0 && routineName != \"\") {\n            const requestOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    user_id: user.id,\n                    name: routineName,\n                    workout1_id: selected[\"Monday\"].id,\n                    workout2_id: selected[\"Tuesday\"].id,\n                    workout3_id: selected[\"Wednesday\"].id,\n                    workout4_id: selected[\"Thursday\"].id,\n                    workout5_id: selected[\"Friday\"].id\n                })\n              };\n          \n            fetch('https://fit-spot.herokuapp.com/weekly_routines', requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                console.log(data);\n                history.push(\"/dashboard\");\n            });\n        }\n    }\n\n    return (\n        <div className=\"routines-form\">\n            <div className=\"spacer\" />\n            <h1 className=\"txt txt-title\">Plan Your Week</h1>\n            <hr/>\n            <h3 className=\"txt\">Name Your Routine</h3>\n            <div className=\"title-div\">\n                    <input\n                        className=\"title-input\"\n                        type=\"text\"\n                        label=\"Name\"\n                        placeholder=\"Routine Title\"\n                        onChange={(e) => setRoutineName(e.target.value)}\n                    />\n            </div>\n            <div className=\"routine-cards\">\n                <div className=\"goal-grid-wrapper\">\n                    {days.map(day => {\n                        return (\n                            <div className=\"goal-card\">\n                                <div className=\"routine-content\">\n                                    <h1 className=\"txt card-header\">{day}</h1>\n                                    <h2 className=\"txt txt-card-title\">{selected[day].name != \"\" && selected[day].name !== \"none\" ? selected[day].name : \"Select A Workout\"}</h2>\n                                    {selected[day].exercises.map(exercise => {\n                                        return (\n                                            <p className=\"txt txt-card-text\">- {exercise.name}</p>\n                                        );\n                                    })}\n                                </div>\n                                <select className=\"daily-select\" onChange={e => setClickedInfo({workout: e.target.value, day: day})}>\n                                    <option value={\"none\"}>Select Workout</option>\n                                    {workouts.map(workout => {\n                                        return (\n                                            <option value={workout.id}>{workout.name}</option>\n                                        );\n                                    })}\n                                </select>\n                            </div>\n                        );\n                    })}\n                    <div className=\"goal-card\">\n                        <div className=\"routine-content\">\n                            <h1 className=\"txt card-header\">Sat/Sun</h1>\n                            <h2 className=\"txt txt-card-title\">Rest Days</h2>\n                            <p className=\"txt txt-card-text\">Take a break. You deserve it!</p>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"grid-gap\">\n                    <button className=\"btn btn-secondary\" onClick={e => saveRoutine(selected)}>Save</button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default NewRoutine;","/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/components/Viewer.js",["99","100","101"],"import React, { useEffect, useState } from \"react\";\nimport { useLocation, useHistory } from 'react-router-dom';\n\nfunction Viewer({ user }) {\n    const location = useLocation();\n    const history = useHistory();\n    const propData = location.state;\n    const show = propData[\"show\"];\n    const id = propData[\"id\"];\n    const [data, setData] = useState({});\n    const [days, setDays] = useState([]);\n\n    useEffect(() => {\n        if (show != null && id != null && user != null) {\n            fetch(`https://fit-spot.herokuapp.com/users/${user.id}/${show}s/${id}`)\n            .then(res => res.json())\n            .then(info => {\n                console.log(\"data\", info);\n                setData(info);\n            })\n            .catch(err => console.log(err));\n        }\n    }, [])\n\n    const deleteItem = item => {\n        fetch(`https://fit-spot.herokuapp.com/${show}s/${item.id}`, {\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        .then(res => res.json())\n        .then(data => {\n            console.log(data);\n            history.push(\"/dashboard\");\n        })\n        .catch(err => console.log(err));\n    }\n\n    if (data[\"workouts\"]) {\n        console.log(\"updated days:\", data);\n        console.log(\"workouts:\", data.workouts)\n\n        return (\n            <div className=\"home-content\">\n                <div className=\"cover\">\n                    <h1 className=\"txt txt-cover\">{data.routine.name}</h1>\n                    {data.workouts.map((day, index) => {\n                        const week = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"];\n                        console.log(\"obj days:\", day)\n                        return (\n                            <div className=\"view-info-div\" key={day.name}>\n                                <p className=\"txt txt-info-list\">{week[index]}:</p>\n                                <p className=\"txt txt-info-list\">{day.name}</p>\n                                <hr />\n                            </div>\n                        );\n                    })}\n                <div className=\"spacer\" />\n                <button className=\"btn btn-primary\" onClick={e => deleteItem(data.routine)}>Delete Workout</button>\n                </div>\n            </div>\n        );\n    } else if (data[\"exercises\"]) {\n        return (\n            <div className=\"viewer-content\">\n                <div className=\"spacer\" />\n                <h1 className=\"txt txt-cover\">{data.name}</h1>\n                {data.exercises.map((exercise, index) => {\n                    return (\n                        <div className=\"view-info-div\" key={index}>\n                            <p className=\"txt txt-info-list\">Exercise {index + 1}:</p>\n                            <p className=\"txt txt-info-list\">{exercise.name}</p>\n                            <hr />\n                        </div>\n                    );\n                })}\n                <div className=\"spacer\" />\n                <button className=\"btn btn-primary\" onClick={e => deleteItem(data)}>Delete Workout</button>\n            </div>\n        );\n    } else {\n        return (\n            <div className=\"home-content\">\n                <div className=\"cover\">\n                    <h1 className=\"txt txt-cover\">Nothing To View</h1>\n                    <p>Access this page through the dashboard</p>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default Viewer;","/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/components/NewWorkout.js",["102"],"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport ExerciseCards from \"./ExerciseCards\";\n\nfunction NewWorkout({ user, setUser }) {\n    const [title, setTitle] = useState(\"Choose Your Split\");\n    const [split, setSplit] = useState([]);\n    const [stage, setStage] = useState(\"Goals\");\n    const [workoutName, setWorkoutName] = useState(\"New Workout\");\n\n    const styleTypes = {\n        \"Single Focus\": [\"Chest\", \"Back\", \"Legs\", \"Arms\", \"Shoulders\", \"Core\"],\n        \"Push/Pull Day\": [\"Chest/Triceps\", \"Back/Biceps\", \"Legs/Shoulders\"],\n        \"Push Day\": [\"Chest\", \"Shoulders\", \"Triceps\"],\n        \"Pull Day\": [\"Back\", \"Biceps\", \"Core\"],\n        \"Upper/Lower\": [\"Upper Body\", \"Lower Body\"]\n    };\n    const descriptions = {\n        \"Single Focus\": \"A workout that focuses on a single muscle group each day. Allows for better recovery time.\",\n        \"Push/Pull Day\": \"This split has a mix of push and pull exercises. Targets opposing groups to lessen fatigue and work the same group multiple times a week.\",\n        \"Push Day\": \"A plan that uses only push exercises, best paired with a day of only pull exercises. Works on similar sections of mucscle through every exercise that day.\",\n        \"Pull Day\": \"A plan that uses only pull exercises, best paired with a day of only push exercises. Works on similar sections of mucscle through every exercise that day.\",\n        \"Upper/Lower\": \"The upper and lower split separates days by upper and lower body. An intense routine targeting the entirety of the body twice a week.\"\n    };\n\n    useEffect(() => {\n        if (user) {\n            fetch(`https://fit-spot.herokuapp.com/users/${user.id}/workouts`)\n            .then(response => response.json())\n            .then(data => {\n                console.log(data);\n            })\n        }\n    } ,[user]);\n\n    const selectGoal = goal => {\n        console.log(goal);\n        setTitle(\"Name Your Workout\");\n        setSplit(styleTypes[goal]);\n        setStage(\"Name\");\n    }\n\n    const setName = name => {\n        console.log(name);\n        setTitle(\"Select Your Exercises\");\n        setWorkoutName(name);\n        setStage(\"Exercises\");\n    }\n\n\n    if (stage === \"Goals\") {\n        return (\n            <div className=\"workouts-form\">\n                <div className=\"spacer\" />\n                <h1 className=\"txt txt-title\">{title}</h1>\n                <hr/>\n                <div className=\"goal-cards\">\n                    <div className=\"goal-grid-wrapper\">\n                        {Object.keys(styleTypes).map(keyName => {\n                            return (\n                                <div className=\"goal-grid-wrapper\">\n                                    <div className=\"goal-card\" onClick={e => selectGoal(keyName)}>\n                                        <h1 className=\"txt card-header\">{keyName}</h1>\n                                        <p className=\"txt goal-card-info\">{descriptions[keyName]}</p>\n                                    </div>\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n            </div>\n            );\n    } else if (stage === \"Name\") {\n        return (\n            <div className=\"workouts-form\">\n                <div className=\"spacer\" />\n                <h1 className=\"txt txt-title\">{title}</h1>\n                <hr/>\n                <div className=\"title-div\">\n                    <input\n                        className=\"title-input\"\n                        type=\"text\"\n                        label=\"Name\"\n                        placeholder=\"Workout Title\"\n                        onChange={(e) => setWorkoutName(e.target.value)}\n                    />\n                    <button className=\"btn btn-quaternary\" onClick={e => setName(workoutName)}>Done</button>\n                </div>\n            </div>\n        );\n    } else if (stage === \"Exercises\") {\n        return (\n            <div className=\"workouts-form\">\n                <div className=\"spacer\" />\n                <h1 className=\"txt txt-title\">{title}</h1>\n                <hr/>\n                <ExerciseCards split={split} user={user} workoutName={workoutName} />\n            </div>\n        );\n    }\n}\n\nexport default NewWorkout;","/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/components/UserInfo.js",["103","104"],"import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory } from 'react-router-dom';\n\nfunction UserInfo({ user, setUser, isLoggedin, setIsLoggedin }) {\n    const history = useHistory();\n    const [msgs, setMsgs] = useState({\n        nameData: \"\",\n        emailData: \"\",\n        goalData: \"\",\n        workoutData: \"\",\n        routineData: \"\"\n    });\n  \n    useEffect(() => {\n      if (isLoggedin) {\n        setMsgs({...msgs,\n            nameData: `username: ${user.name}`,\n            emailData: `email: ${user.email}`,\n            goalData: `current goal: ${user.goal}`,\n            workoutData: \"\",\n            routineData: \"\"\n        });\n      } else {\n        setMsgs(\"Login to view this page\");\n      }\n    }, [isLoggedin]);\n\n    const logoutFunction = e => {\n        e.preventDefault();\n        fetch(`https://fit-spot.herokuapp.com/logout`, {\n            method: 'DELETE',\n            credentials: 'include'\n          })\n            .then(res => {\n              if (res.ok) {\n                console.log(\"Deleted!\")\n                setIsLoggedin(false);\n                setUser(null);\n                history.push('/');\n              }\n            })\n    }\n\n    return (\n    <div className=\"user-info\">\n        <div className=\"spacer\" />\n        <h1 className=\"txt txt-form\">{msgs.nameData}</h1>\n        <h1 className=\"txt txt-form\">{msgs.emailData}</h1>\n        <h1 className=\"txt txt-form\">{msgs.goalData}</h1>\n        <button className=\"btn btn-secondary\" onClick={logoutFunction}>Logout</button>\n    </div>\n    );\n}\n\nexport default UserInfo;","/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/components/FourZeroFour.js",[],"/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/components/NavBar.js",["105","106"],"import React, { useState, useEffect } from \"react\";\nimport { Link } from 'react-router-dom';\nimport icon from \"../icon.png\";\n\nfunction NavBar({ user, isLoggedin }) {\n  const [msgs, setMsgs] = useState(\"\");\n  const [links, setLinks] = useState({\n    btnRight: \"/login\",\n    dashboard: \"/dashboard\",\n    userinfo: \"/user-info\",\n  });\n\n  useEffect(() => {\n    if (isLoggedin) {\n      setMsgs({btnRight: `Hello, ${user.name}`, btnLeft: \"Dashboard\"});\n      setLinks({btnRight: \"/user-info\", btnLeft: \"/dashboard\"});\n    } else {\n      setMsgs({btnRight: \"Login\", btnLeft: \"Home\"});\n      setLinks({btnRight: \"/login\", btnLeft: \"/\"});\n    }\n  }, [isLoggedin]);\n\n  return (\n    <nav className=\"nav-bar\">\n        <ul className=\"nav-bar-list\">\n            {/* <img className=\"nav-bar-logo\" src={icon} alt=\"logo\" /> */}\n            <div className=\"nav-bar-logo\">\n              <Link to=\"/\">\n                <p className=\"txt txt-logo txt-space\">The</p>\n                <p className=\"txt txt-logo\">Fit</p>\n                <p className=\"txt txt-logo\">Spot.</p>\n              </Link>\n            </div>\n            <li className=\"txt txt-nav\"><Link to={links[\"btnLeft\"]} className=\"txt-underline\">{msgs.btnLeft}</Link></li>\n            <li className=\"txt txt-nav\"><Link to=\"/news\" className=\"txt-underline\">News</Link></li>\n            <li className=\"txt txt-nav push-left\"><Link to={links[\"btnRight\"]} className=\"txt-underline\">{msgs.btnRight}</Link></li>\n        </ul>\n    </nav>\n  );\n}\n\nexport default NavBar;","/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/components/NewsCards.js",[],"/home/tre/Development/FitSpot/Workout-Back/portfolio-react/src/components/ExerciseCards.js",["107","108","109","110","111","112","113","114","115","116"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction ExerciseCards({ split, user, workoutName }) {\n    const history = useHistory();\n    const [search, setSearch] = useState(\"all\");\n    const [target, setTarget] = useState(split[0]);\n    const [filteredTerms, setFilteredTerms] = useState([]);\n    const [exercises, setExercises] = useState([]);\n    const [workoutList, setWorkoutList] = useState([]);\n    const [newWorkout, setNewWorkout] = useState(\"\");\n\n    useEffect(() => {\n        if (search) {\n            const requestOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({filter: search, target: target})\n              };\n          \n            //   fetch('https://fit-spot.herokuapp.com/exercise-filter', requestOptions)\n            //   .then(response => response.json())\n            //   .then(data => {\n            //     console.log(data);\n            //     setExercises(data);\n            //   });\n        }\n        if (search === \"\") {\n            setSearch(\"all\");\n        }\n    } ,[search, target]);\n\n    useEffect(() => {\n        workoutList.map(exercise => {\n            console.log(`New Workout ID: ${newWorkout}, Exercise ID: ${exercise.id}`);\n            const requestOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    exercise_id: exercise.id,\n                    workout_id: newWorkout\n                })\n              };\n          \n            // fetch('https://fit-spot.herokuapp.com/workout_exercises', requestOptions)\n            // .then(response => response.json())\n            // .then(data => {\n            // console.log(data);\n            // // history.push(\"/set-goal\");\n            // });\n        });\n    }, [newWorkout])\n\n    useEffect(() => {\n    if (workoutList.length === 5) {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                user_id: user.id,\n                name: workoutName\n            })\n          };\n      \n        // fetch('https://fit-spot.herokuapp.com/workouts', requestOptions)\n        // .then(response => response.json())\n        // .then(data => {\n        // console.log(data);\n        // setNewWorkout(data.id);\n        // history.push(\"/dashboard\");\n        // });\n    }\n    }, [workoutList])\n\n    const addExercise = (event, exercise) => {\n        setWorkoutList([...workoutList, exercise]);\n        setFilteredTerms([...filteredTerms, event.currentTarget.querySelector('.exercise-name').querySelector('h3').innerText.toLowerCase()]);\n    }\n\n    return (\n        <div className=\"exercises-div\">\n            <h3 className=\"txt txt-exercise-guide\">Select 5 exercises from the list below to create your workout.</h3>\n            <div className=\"filters\">\n                <div className=\"filter-div\">\n                    <h3 className=\"txt txt-filters\">Filter</h3>\n                    <h3 className=\"txt txt-filters\">Search</h3>\n                </div>\n                <div className=\"search-div\">\n                <select className=\"filter-select\" onChange={(e) => setTarget(e.target.value)}>\n                        {split.map(item => {\n                            return (\n                                <option value={item}>{item}</option>\n                            );\n                        })}\n                    </select>\n                    <input\n                        className=\"search-input\"\n                        type=\"text\"\n                        label=\"Search\"\n                        placeholder=\"Name, Equipment, or Muscle...\"\n                        onChange={(e) => setSearch(e.target.value)}\n                    />\n                </div>\n            </div>\n            <hr />\n            <div className=\"exercise-cards\">\n                <div className=\"exercise-grid-wrapper\">\n                    {exercises.map(exercise => {\n                        let exerciseName = exercise.name.trim();\n                        if (!filteredTerms.includes(exerciseName.toLowerCase())) {\n                            if (!exerciseName.includes(\"stretch\")) {\n                                return (\n                                    <div className=\"exercise-card\" key={exercise.id} onClick={event => addExercise(event, exercise)}>\n                                        <div className=\"exercise-name\">\n                                            <h3 className=\"txt txt-exercise-name\">{exercise.name}</h3>\n                                        </div>\n                                        <img src={exercise.video} alt={exercise.name} className=\"exercise-gif\" />\n                                        <div className=\"exercise-details\">\n                                            <p className=\"txt txt-exerise-info\">Muscle: {exercise.target}</p>\n                                            <p className=\"txt txt-exerise-info\">Equipment: {exercise.equipment}</p>\n                                        </div>\n                                    </div>\n                                )\n                            }\n                        }\n                    })}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default ExerciseCards;",{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":20,"column":10,"nodeType":"123","messageId":"124","endLine":20,"endColumn":21},{"ruleId":"121","severity":1,"message":"125","line":1,"column":27,"nodeType":"123","messageId":"124","endLine":1,"endColumn":36},{"ruleId":"121","severity":1,"message":"125","line":1,"column":26,"nodeType":"123","messageId":"124","endLine":1,"endColumn":35},{"ruleId":"121","severity":1,"message":"126","line":2,"column":10,"nodeType":"123","messageId":"124","endLine":2,"endColumn":14},{"ruleId":"121","severity":1,"message":"127","line":6,"column":18,"nodeType":"123","messageId":"124","endLine":6,"endColumn":25},{"ruleId":"128","severity":1,"message":"129","line":30,"column":63,"nodeType":"130","messageId":"131","endLine":30,"endColumn":65},{"ruleId":"128","severity":1,"message":"129","line":34,"column":40,"nodeType":"130","messageId":"131","endLine":34,"endColumn":42},{"ruleId":"132","severity":1,"message":"133","line":38,"column":8,"nodeType":"134","endLine":38,"endColumn":21,"suggestions":"135"},{"ruleId":"128","severity":1,"message":"129","line":43,"column":53,"nodeType":"130","messageId":"131","endLine":43,"endColumn":55},{"ruleId":"128","severity":1,"message":"129","line":43,"column":75,"nodeType":"130","messageId":"131","endLine":43,"endColumn":77},{"ruleId":"128","severity":1,"message":"129","line":46,"column":28,"nodeType":"130","messageId":"131","endLine":46,"endColumn":30},{"ruleId":"128","severity":1,"message":"136","line":46,"column":48,"nodeType":"130","messageId":"131","endLine":46,"endColumn":50},{"ruleId":"128","severity":1,"message":"136","line":92,"column":92,"nodeType":"130","messageId":"131","endLine":92,"endColumn":94},{"ruleId":"121","severity":1,"message":"137","line":11,"column":12,"nodeType":"123","messageId":"124","endLine":11,"endColumn":16},{"ruleId":"121","severity":1,"message":"127","line":11,"column":18,"nodeType":"123","messageId":"124","endLine":11,"endColumn":25},{"ruleId":"132","severity":1,"message":"138","line":23,"column":8,"nodeType":"134","endLine":23,"endColumn":10,"suggestions":"139"},{"ruleId":"121","severity":1,"message":"126","line":2,"column":10,"nodeType":"123","messageId":"124","endLine":2,"endColumn":14},{"ruleId":"121","severity":1,"message":"126","line":2,"column":10,"nodeType":"123","messageId":"124","endLine":2,"endColumn":14},{"ruleId":"132","severity":1,"message":"140","line":26,"column":8,"nodeType":"134","endLine":26,"endColumn":20,"suggestions":"141"},{"ruleId":"121","severity":1,"message":"142","line":3,"column":8,"nodeType":"123","messageId":"124","endLine":3,"endColumn":12},{"ruleId":"132","severity":1,"message":"143","line":21,"column":6,"nodeType":"134","endLine":21,"endColumn":18,"suggestions":"144"},{"ruleId":"121","severity":1,"message":"145","line":5,"column":11,"nodeType":"123","messageId":"124","endLine":5,"endColumn":18},{"ruleId":"121","severity":1,"message":"146","line":9,"column":23,"nodeType":"123","messageId":"124","endLine":9,"endColumn":35},{"ruleId":"121","severity":1,"message":"147","line":11,"column":24,"nodeType":"123","messageId":"124","endLine":11,"endColumn":37},{"ruleId":"121","severity":1,"message":"148","line":15,"column":19,"nodeType":"123","messageId":"124","endLine":15,"endColumn":33},{"ruleId":"149","severity":1,"message":"150","line":34,"column":34,"nodeType":"151","messageId":"152","endLine":34,"endColumn":36},{"ruleId":"121","severity":1,"message":"148","line":36,"column":19,"nodeType":"123","messageId":"124","endLine":36,"endColumn":33},{"ruleId":"132","severity":1,"message":"153","line":52,"column":8,"nodeType":"134","endLine":52,"endColumn":20,"suggestions":"154"},{"ruleId":"121","severity":1,"message":"148","line":56,"column":15,"nodeType":"123","messageId":"124","endLine":56,"endColumn":29},{"ruleId":"132","severity":1,"message":"155","line":73,"column":8,"nodeType":"134","endLine":73,"endColumn":21,"suggestions":"156"},{"ruleId":"149","severity":1,"message":"157","line":108,"column":45,"nodeType":"151","messageId":"158","endLine":108,"endColumn":47},"no-native-reassign",["159"],"no-negated-in-lhs",["160"],"no-unused-vars","'workoutInfo' is assigned a value but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Link' is defined but never used.","'setDays' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'selected' and 'workouts'. Either include them or remove the dependency array. You can also do a functional update 'setSelected(s => ...)' if you only need 'selected' in the 'setSelected' call.","ArrayExpression",["161"],"Expected '!==' and instead saw '!='.","'days' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'id', 'show', and 'user'. Either include them or remove the dependency array.",["162"],"React Hook useEffect has missing dependencies: 'msgs', 'user.email', 'user.goal', and 'user.name'. Either include them or remove the dependency array. You can also do a functional update 'setMsgs(m => ...)' if you only need 'msgs' in the 'setMsgs' call.",["163"],"'icon' is defined but never used.","React Hook useEffect has a missing dependency: 'user.name'. Either include it or remove the dependency array. If 'setMsgs' needs the current value of 'user.name', you can also switch to useReducer instead of useState and read 'user.name' in the reducer.",["164"],"'history' is assigned a value but never used.","'setExercises' is assigned a value but never used.","'setNewWorkout' is assigned a value but never used.","'requestOptions' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'workoutList'. Either include it or remove the dependency array.",["165"],"React Hook useEffect has missing dependencies: 'user.id' and 'workoutName'. Either include them or remove the dependency array.",["166"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","no-global-assign","no-unsafe-negation",{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},"Update the dependencies array to be: [clickedInfo, selected, workouts]",{"range":"179","text":"180"},"Update the dependencies array to be: [id, show, user]",{"range":"181","text":"182"},"Update the dependencies array to be: [isLoggedin, msgs, user.email, user.goal, user.name]",{"range":"183","text":"184"},"Update the dependencies array to be: [isLoggedin, user.name]",{"range":"185","text":"186"},"Update the dependencies array to be: [newWorkout, workoutList]",{"range":"187","text":"188"},"Update the dependencies array to be: [user.id, workoutList, workoutName]",{"range":"189","text":"190"},[1646,1659],"[clickedInfo, selected, workouts]",[779,781],"[id, show, user]",[734,746],"[isLoggedin, msgs, user.email, user.goal, user.name]",[641,653],"[isLoggedin, user.name]",[1911,1923],"[newWorkout, workoutList]",[2525,2538],"[user.id, workoutList, workoutName]"]